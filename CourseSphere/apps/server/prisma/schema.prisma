generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
// TODO: add a postgresql datasource neon database
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Role {
  id         Int       @id @default(autoincrement())
  name       String    
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime?

  permission Permission[]
  user       User[]

  @@map("roles")
}

model Permission {
  id         Int     @id @default(autoincrement())
  role       Role    @relation(fields: [role_id], references: [id])
  role_id    Int
  action     String
  subject    String
  inverted   Boolean @default(false)
  conditions Json?
  reason     String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime?

  @@map("permissions")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean? @default(true)

  sample       Sample[]

  createdCourses    Course[]           @relation("CourseCreator")
  instructorCourses CourseInstructor[] 
  studentCourses    CourseStudent[]    
  createdLessons    Lesson[]           @relation("LessonCreator")

  role     Role @relation(fields: [role_id], references: [id])
  role_id  Int

  @@map("users")
}

model Sample {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User   @relation(fields: [user_id], references: [id])
  user_id   String

  @@map("samples")
}

model Course {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt    @map("updated_at")

  creatorId   String   @map("creator_id")
  creator     User     @relation("CourseCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  instructors CourseInstructor[]
  students    CourseStudent[]
  lessons     Lesson[]

  @@map("courses")
}

model CourseInstructor {
  id       String @id @default(cuid())
  courseId String @map("course_id")
  userId   String @map("user_id")

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("course_instructors")
}

model CourseStudent {
  id         String   @id @default(cuid())
  courseId   String   @map("course_id")
  studentId  String   @map("student_id")
  created_at DateTime @default(now())

  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@map("course_students")
}

model Lesson {
  id           String       @id @default(cuid())
  title        String       
  status       LessonStatus @default(DRAFT)
  publishDate  DateTime     @map("publish_date")
  videoUrl     String       @map("video_url")
  youtubeId    String?      @map("youtube_id")
  thumbnailUrl String?      @map("thumbnail_url")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt    @map("updated_at")

  courseId   String  @map("course_id")
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  creatorId  String  @map("creator_id")
  creator    User    @relation("LessonCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([title, courseId])
  @@map("lessons")
}